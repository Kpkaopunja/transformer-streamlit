import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import font_manager

# ‡πÉ‡∏ä‡πâ css ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°
st.markdown("""
<style>
    /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö */
    .css-18e3th9 {
        padding: 2rem 5rem;
    }
    
    /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ï‡πâ */
    h1 {
        color: #003366;
        border-bottom: 2px solid #003366;
        padding-bottom: 1 !important; 
        margin-bottom: 0 !important;
        # display: inline-block;  # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏¢‡∏≤‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    }
    
    # /* ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô */
    # .css-18e3th9 {
    #     padding-top: 1rem !important;
    # }
    
    /* ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô ‡∏ó‡∏≥‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á */
    .st-eb {
        background-color: #f0f2f6;
        border-radius: 10px; /* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô */
        padding: 25px;
    }
    
</style>
""", unsafe_allow_html=True)

# SET ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
def setup_thai_font():
    font_path = 'THSarabunNew.ttf'
    font_prop = font_manager.FontProperties(fname=font_path)
    plt.rcParams['font.family'] = font_prop.get_name()

# ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° LBBSA
def plot_lbbsa(df):
    counts = df['LBBSA'].value_counts(dropna=False)
    labels = counts.index.fillna('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')

    total = sum(counts.values)

    new_labels = []
    for label, count in zip(labels, counts.values):
        pct = count / total * 100
        new_labels.append(f'{label} - {count} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ({pct:.1f}%)')

    fig, ax = plt.subplots(figsize=(12, 12))
    fig.patch.set_facecolor('#f5f5f5')  # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≤‡∏ü

    ax.pie(
        counts.values,
        labels=new_labels,
        autopct='%1.1f%%',
        startangle=90,
        colors=plt.cm.Set3.colors,
        textprops={'fontsize': 19},
        labeldistance=1.1
    )

    ax.set_title('‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á (LBBSA)',fontsize=25, color="#003366", fontweight='bold',x=0.5,y=0.9)
    ax.axis('equal')
    plt.tight_layout()
    return fig

# upload file
def load_data(file):
    try:
        if file.name.endswith('.csv'):
            df = pd.read_csv(file)
        elif file.name.endswith('.xlsx'):
            df = pd.read_excel(file)
        else:
            st.error("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà‡πÑ‡∏ü‡∏•‡πå CSV ‡πÅ‡∏•‡∏∞ Excel ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            return None
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤ NULL ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NaN
        df[['LBBSA', '‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥', '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢', '‡πÅ‡∏ö‡∏ó‡∏ã‡πå']] = df[['LBBSA', '‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥', '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢', '‡πÅ‡∏ö‡∏ó‡∏ã‡πå']].replace(['', 'NULL'], pd.NA)
        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {e}")
        return None

# START
setup_thai_font()
st.markdown("""
<style>
/* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å */
* {
    font-family: 'TH Sarabun New', sans-serif !important;
}

/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å */
.dashboard-title {
    font-size: 50px !important;
    font-weight: bold !important;
    color: #003366 !important;
    margin-bottom: 20px !important;
}

/* ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á */
.stDataFrame, .dataframe {
    font-size: 24px !important;
    font-family: 'TH Sarabun New', sans-serif !important;
}

.stDataFrame td, .stDataFrame th {
    padding: 4px 8px !important;
    font-family: 'TH Sarabun New', sans-serif !important;
}

/* ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ */
body, div, span, app, p, a, li, ul, ol,button, input, select, textarea {
    font-size: 24px !important;
    font-family: 'TH Sarabun New', sans-serif !important;
}           
</style>
""", unsafe_allow_html=True)


# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå
font_prop = setup_thai_font()

# ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
st.markdown('<h1 class="dashboard-title">Transformer Data Dashboard</h1>', unsafe_allow_html=True)

#‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå excel ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á .csv ‡πÅ‡∏•‡∏∞ .xlsx
# st.write("") #‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á
uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (.csv ‡∏´‡∏£‡∏∑‡∏≠ .xlsx)", type=["csv", "xlsx"])

# ‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
def plot_lbbsa_filtered(filtered_df):
    counts = filtered_df['LBBSA'].value_counts(dropna=False)
    labels = counts.index.fillna('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')

    total = sum(counts.values)
    new_labels = []
    for label, count in zip(labels, counts.values):
        pct = count / total * 100
        new_labels.append(f'{label} - {count} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ({pct:.1f}%)')

    fig, ax = plt.subplots(figsize=(10, 10))
    fig.patch.set_facecolor('#fefefe')  # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢

    ax.pie(
        counts.values,
        labels=new_labels,
        autopct='%1.1f%%',
        startangle=90,
        colors=plt.cm.Pastel1.colors,
        textprops={'fontsize': 18},
        labeldistance=1.1
    )
    ax.set_title('‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (LBBSA)', fontsize=20, color="#336699", fontweight='bold', x=0.5, y=0.9)
    ax.axis('equal')

    plt.tight_layout()
    return fig

# üîò ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ label ‡πÉ‡∏ô‡∏ß‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏° legend ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
def plot_pie_with_right_legend(filtered_df):
    counts = filtered_df['LBBSA'].value_counts(dropna=False)
    labels = counts.index.fillna('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    values = counts.values

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô legend
    total = sum(values)
    legend_labels = [
        f"{label} - {count} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ({count/total:.1%})"
        for label, count in zip(labels, values)
    ]

    fig, ax = plt.subplots(figsize=(8, 8))
    fig.patch.set_facecolor('#fafafa')

    wedges, _ = ax.pie(
        values,
        labels=None,
        colors=plt.cm.Pastel1.colors,
        startangle=90
    )

    # ‡∏ß‡∏≤‡∏á legend ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤
    ax.legend(
        wedges,
        legend_labels,
        title="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
        loc="center left",
        bbox_to_anchor=(1, 0.5),
        fontsize=14,
        title_fontsize=15
    )

    ax.set_title("‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á (LBBSA)", fontsize=20, color="#003366", fontweight='bold', x=0.5, y=0.9)
    ax.axis('equal')
    plt.tight_layout()
    return fig

# ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å : ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥+‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
def plot_error_codes_bar(df, font_prop):
    if '‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥' not in df.columns or '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢' not in df.columns:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢")
        return
    
    #set‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏°‡∏π‡∏•
    df['‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥'] = df['‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥'].fillna('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    df['‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'] = df['‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'].fillna('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')

    grouped = (
        df[['‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥', '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢']]
        .dropna()
        .groupby(['‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥', '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'])
        .size()
        .reset_index(name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')
        .sort_values(by='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', ascending=True)
    )
    if grouped.empty:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á")
        return
    def generate_label(row):
        if row['‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥'] == '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' and row['‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'] == '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•':
            return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        else:
            return f"{row['‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥']} : {row['‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢']}"

    # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á label
    grouped['label'] = grouped.apply(generate_label, axis=1)

    labels = grouped['label']
    values = grouped['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']

    max_value = max(values)
    width_factor = 0.1 if max_value < 50 else 0.08  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    fig_width = min(10, max(10, int(max_value * width_factor)))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    fig, ax = plt.subplots(figsize=(fig_width, len(labels) * 0.6))

    bars = ax.barh(labels, values, color='mediumseagreen')

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå
    for label in ax.get_yticklabels():
        label.set_fontproperties(font_prop)
        label.set_fontsize(17)
    for label in ax.get_xticklabels():
        label.set_fontproperties(font_prop)
        label.set_fontsize(17)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    for bar in bars:
        width = bar.get_width()
        x_pos = width + (max_value * 0.01)
        ax.text(x_pos, bar.get_y() + bar.get_height() / 2,
                f'{int(width)} ', va='center', fontsize=17, fontproperties=font_prop)

    ax.set_xlim([0, max_value * 1.2])
    ax.set_title('‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å', fontproperties=font_prop, fontsize=20, color="#336699", fontweight='bold',y=1.05)
    ax.set_xlabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', fontproperties=font_prop, fontsize=17)
    ax.set_ylabel('‡∏£‡∏´‡∏±‡∏™ : ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢', fontproperties=font_prop, fontsize=17)

    st.pyplot(fig)

if uploaded_file is not None:
    df = load_data(uploaded_file)
    st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ ‡∏û‡∏ö‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(df)} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
    if df is not None:
        with st.container():
            st.markdown("<h4 style='color:#333;'>üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏° ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á LBBSA</h4>", unsafe_allow_html=True)
            with st.expander("‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü"):
                fig_overall = plot_lbbsa(df)
                st.pyplot(fig_overall)

        st.subheader("üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        st.write(df.head())


        filtered_df = df.copy()

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        st.subheader("üìù‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        filter_mode = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á", ["‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤", "‡πÅ‡∏ö‡∏ö‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å"])

        if filter_mode == "‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤":
            st.markdown("üîπ ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ")
            # ‡∏ï‡∏±‡∏î "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            available_columns = [col for col in df.columns if col != "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"]

            col_to_filter = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", available_columns)

            if col_to_filter == "‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥" and "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢" in df.columns:
                # ‡∏£‡∏ß‡∏°‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
                combined = df[["‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"]].dropna().drop_duplicates()
                options = [f"{row['‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥']} : {row['‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢']}" for _, row in combined.iterrows()]
                selected_option = st.selectbox(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {col_to_filter}", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + options)

                if selected_option != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                    selected_code = selected_option.split(" : ")[0]
                    filtered_df = df[df["‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"] == selected_code]
            else:
                unique_vals = df[col_to_filter].dropna().unique()
                selected_vals = st.multiselect(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {col_to_filter}", list(unique_vals))

                if selected_vals:
                    filtered_df = df[df[col_to_filter].isin(selected_vals)]


        elif filter_mode == "‡πÅ‡∏ö‡∏ö‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å":
            st.markdown("üî∏ ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô ")

            # ‡∏ï‡∏±‡∏î "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            excluded_cols = ["‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"]
            available_cols = [col for col in filtered_df.columns if col not in excluded_cols]
            start_col = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", available_cols)

            try:
                start_index = available_cols.index(start_col)
                for col in available_cols[start_index:]:
                    #‡∏£‡∏ß‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                    if col in filtered_df.columns and not filtered_df.empty:
                        if col == "‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥" and "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢" in filtered_df.columns:
                            combined = (
                                filtered_df[["‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"]]
                                .dropna()
                                .drop_duplicates()
                            )
                            options = [f"{row['‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥']} : {row['‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢']}" for _, row in combined.iterrows()]
                            selected = st.selectbox(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô \"{col}\"", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + options)

                            if selected != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                                selected_code = selected.split(" : ")[0]
                                filtered_df = filtered_df[filtered_df["‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"] == selected_code]
                        else:
                            values = filtered_df[col].dropna().unique()
                            
                            if col == "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á":
                                selected_values = st.multiselect(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô \"{col}\"", list(values))
                                if selected_values:
                                    filtered_df = filtered_df[filtered_df[col].isin(selected_values)]
                            selected_vals = st.multiselect(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô \"{col}\"", list(values))
                            if selected_vals:
                                filtered_df = filtered_df[filtered_df[col].isin(selected_vals)]


            except Exception as e:
                st.warning(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å: {e}")

        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
        st.subheader("üßÆ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á : {} ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á".format(len(filtered_df)))

        st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
        st.write(filtered_df)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if not filtered_df.empty:
            st.subheader("üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

            font_prop = setup_thai_font()
            
            with st.expander("üîò ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á LBBSA"):
                fig_filtered = plot_pie_with_right_legend(filtered_df) 
                st.pyplot(fig_filtered)

            with st.expander("üìâ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"):
                fig_bar = plot_error_codes_bar(filtered_df, font_prop)
                if fig_bar:
                    st.pyplot(fig_bar)

    else:
        st.warning("‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
else:
    st.write("‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå...")